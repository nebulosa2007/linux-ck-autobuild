#!/bin/bash
# Author: Jochum D, jooch (at) gmx (dot) com
# Contributor: Nebulosa
# License: GPL 3.0
# About: This script will automatically build specified -ck linux kernels
# on a headless machines.
# Usage: Run 'linux-ck-autobuild' or 'linux-ck-autobuild -h' for more details


program_name=${0##*/}


function subarches {
    cat << EOF > "$1"
arch_1="k8"              #   1. AMD Opteron/Athlon64/Hammer/K8
arch_2="k8sse3"          #   2. AMD Opteron/Athlon64/Hammer/K8 with SSE3
arch_3="k10"             #   3. AMD 61xx/7x50/PhenomX3/X4/II/K10
arch_4="barcelona"       #   4. AMD Barcelona
arch_5="bobcat"          #   5. AMD Bobcat
arch_6="jaguar"          #   6. AMD Jaguar
arch_7="bulldozer"       #   7. AMD Bulldozer
arch_8="piledriver"      #   8. AMD Piledriver
arch_9="steamroller"     #   9. AMD Steamroller
arch_10="excavator"      #  10. AMD Excavator
arch_11="zen"            #  11. AMD Zen
arch_12="zen2"           #  12. AMD Zen 2
arch_13="zen3"           #  13. AMD Zen 3
arch_14="zen4"           #  14. AMD Zen 4
arch_15="psc"            #  15. Intel P4 / older Netburst based Xeon
arch_16="core2"          #  16. Intel Core 2
arch_17="atom"           #  17. Intel Atom
arch_18="nehalem"        #  18. Intel Nehalem
arch_19="westmere"       #  19. Intel Westmere
arch_20="silvermont"     #  20. Intel Silvermont
arch_21="goldmont"       #  21. Intel Goldmont
arch_22="goldmontplus"   #  22. Intel Goldmont Plus
arch_23="sandybridge"    #  23. Intel Sandy Bridge
arch_24="ivybridge"      #  24. Intel Ivy Bridge
arch_25="haswell"        #  25. Intel Haswell
arch_26="broadwell"      #  26. Intel Broadwell
arch_27="skylake"        #  27. Intel Skylake
arch_28="skylakex"       #  28. Intel Skylake X
arch_29="cannonlake"     #  29. Intel Cannon Lake
arch_30="icelake"        #  30. Intel Ice Lake
arch_31="cascadelake"    #  31. Intel Cascade Lake
arch_32="cooperlake"     #  32. Intel Cooper Lake
arch_33="tigerlake"      #  33. Intel Tiger Lake
arch_34="sapphirerapids" #  34. Intel Sapphire Rapids
arch_35="rocketlake"     #  35. Intel Rocket Lake
arch_36="alderlake"      #  36. Intel Alder Lake
arch_37="raptorlake"     #  37. Intel Raptor Lake
arch_38="meteorlake"     #  38. Intel Meteor Lake
arch_39=""               #  39. Generic-x86-64    (DEFAULT)
arch_40="generic-v2"     #  40. Generic-x86-64-v2
arch_41="generic-v3"     #  41. Generic-x86-64-v3
arch_42="generic-v4"     #  42. Generic-x86-64-v4
arch_43="native_intel"   #  43. Intel-Native optimizations detected by the compiler
arch_44="native_amd"     #  44. AMD-Native optimizations detected by the compiler
EOF
}


function default_conf {
    cat << EOF > "$1"
#!/bin/sh

# Since kernel version 5.7.1.arch-1, which contain BTF option, compilation of
# the kernel requires about 8 Gb of RAM + SWAP. And 25 Gb of disk space
# (or less if you use modprobed-db)
# You have been warned!

# Preferred editor for editing settings
EDITOR="need_config"

# Compile linux-ck kernel by pkgctl tool in clean chroot
# https://wiki.archlinux.org/title/DeveloperWiki:Building_in_a_clean_chroot
USE_DEVTOOLS=""

# For selecting another version of kernel. Format is: 'git_commit:version',
# e.g. 'bb1d3c5:6.6-2'
# Use 'git log --oneline' in BUILD_DIR to list them
NEEDED_VERSION=""

# The base directory on this system where the directories to sync are located.
# Don't add a slash at the end!
BUILD_DIR="/home/$USER/.local/share/linux-ck-autobuild"

# List of modules does not need to be compiled, space separated
NOMODULES=""

# User commands to run after compiling kernels, example:
# 'echo "Autobuild done" | mail -s "Autobuild \$kernel_version done" i@mail.tld'
# Only after compilation the kernel with selected sub-architecture is complete
USER_COMMAND1=""
# After selected profile
USER_COMMAND2=""
# At the end
USER_COMMAND3=""

# Select a repo-ck mirror to use when seeking for prebuilt packages (only one
# can be enabled).
REPO_CK_MIRROR="https://mirror.lesviallon.fr/repo-ck/os/x86_64"
REPO_CK_NAME="repo-ck"
# Another variant, repo from author
#REPO_CK_MIRROR="http://repo-ck.com/x86_64"
#REPO_CK_NAME="repo-ck"

# If you have a local repository and wish to automatically add completed builds
# to it you can enable it by setting USE_LOCAL_REPO to "y", leave empty to off
USE_LOCAL_REPO=""
LOCAL_REPO_FOLDER="/home/$USER/.local/share/linux-ck-autobuild/local_repo"
LOCAL_REPO_NAME="linux-ck"
# Location of your local repository and database. Don't add a slash at the end!
# Hint: to add local repo in local pacman.conf:
# [<LOCAL_REPO_NAME>]
# SigLevel = Never
# Server = file:///<LOCAL_REPO_FOLDER>

# Another variant is using repo tool: https://github.com/cassava/repoctl
USE_REPOCTL=""
REPOCTL_FOLDER=""
# Location of your local repository and database. Don't add a slash at the end!
# Hint: to add repoctl repo in pacman.conf:
# [<REPOCTL_REPO_NAME>]
# SigLevel = Never
# Server = file:///<REPOCTL_FOLDER>

# db-file for modprobed
DBFILE="linux-ck-autobuild.db"

################################################################################
## -ck specific options

# If you have the modprobe-db package installed and wish to use it, change to
# 'y' otherwise leave empty. With the modprobe-db package only the modules that
# were listed by modprobe-db get build, significantly reducing build times.
# See for more info: https://wiki.archlinux.org/title/Modprobed-db
localmodcfg=""

# Compile using clang rather than gcc, change to 'y' otherwise leave empty.
clangbuild=""

# List the sub-architecture you want to build in default profile
# In case of multiple architectures separate them with a space: ( 39 40 41 )
# Or use option -a for select from subarches list, see --help.
subarch=( 39 )
################################################################################

# Profiles
# List profiles files one by one, space separated.
# Default is 'linux-ck-autobuild'
PROFILES=( $program_name )

CONFIG_VERSION=0.8.3
EOF
}


VERSION=0.8.3

CONFIG_DIR="/home/$USER/.config/$program_name"


function print_help {
    underline=$(tput smul)
    nounderline=$(tput rmul)
    echo "
A tool to automatically build linux-ck kernels.

${underline}Usage:${nounderline} $program_name [ OPTIONS [profile_name] | nobuild ]

${underline}Options:${nounderline}
   -c [profile_name]     Create and/or set options, default or selected profilename file
   -n <profile_name>     Create new profile
   -l                    List available profiles
   -a                    Choose desired subarches

   -h                    Print help information

${underline}Commands:${nounderline}
    nobuild              Run script without building a kernel. Use this for first run.


Linux-ck kernels: <https://wiki.archlinux.org/title/Unofficial_user_repositories/Repo-ck>
More info about autobuild script: <https://github.com/nebulosa2007/linux-ck-autobuild>

Version $VERSION
"
}


function edit_config {
    if [ -f /usr/bin/"$EDITOR" ]; then
        if [ -n "$1" ]; then
            p=$(basename "$1" .conf)
            [ -r "$CONFIG_DIR/$p.conf" ] && $EDITOR "$CONFIG_DIR/$p.conf" || echo "No profile $p found"
        else
            $EDITOR "$CONFIG_DIR/$program_name.conf"
            sed -i '/USER_COMMAND/s|\$|\\$|g;/USER_COMMAND/s|\\\\|\\|g' "$CONFIG_DIR/$program_name.conf"
        fi
    else
        echo -e "No editor found, please set your editor in:\n$CONFIG_DIR/$program_name.conf"
        exit 1
    fi
}


function new_profile {
    skip_parameters="(EDITOR|USE_DEVTOOLS|BUILD_DIR|USER_COMMAND1|USER_COMMAND2|USER_COMMAND3|REPO_CK_MIRROR|REPO_CK_NAME|USE_LOCAL_REPO|LOCAL_REPO_FOLDER|LOCAL_REPO_NAME|USE_REPOCTL|REPOCTL_FOLDER|CONFIG_VERSION|PROFILES)"
    p=$(basename "$1" .conf)
    if [ ! -r "$CONFIG_DIR/$p.conf" ]; then
        grep -Ev "^(#|$)" "$CONFIG_DIR/$program_name.conf" | grep -Ev $skip_parameters > "$CONFIG_DIR/$p.conf"
        $EDITOR "$CONFIG_DIR/$p.conf"
    else
        echo "Profile $p exists already! Please choose another name or use -c option for edit"
        exit 1
    fi
}


function set_subarches {
    message="Default is Generic-x86-64 - number 39. See: https://wiki.archlinux.org/index.php/Repo-ck for more info"
    if [ -x "$(command -v fzf)" ]; then
        archs=$(cut -d "#" -f2 < "$CONFIG_DIR/subarches" | fzf --sync --bind 'start:pos(39)+select+pos(1)' -m --reverse --preview "echo 'Use Tab to select desired archs'; echo $message" --preview-window=wrap | cut -d'.' -f1 | sed 's/  / /g'| tr -d '\n' )
    else
        cut -d "#" -f2 < "$CONFIG_DIR/subarches"
        echo -e "\n$message\n"
        archs=" 39"
        read -rp "Write numbers of desired arches above, space separated:" -e -i "${archs}" archs
    fi
    if [ -n "$archs" ]; then
        sed -i '/^#/!s|subarch=(.*)|subarch=('"${archs[*]}"' )|g' "$CONFIG_DIR/$program_name.conf"
        echo "Config updated!"
    fi
}


function update_config {
    UPDATE=( EDITOR USE_DEVTOOLS NEEDED_VERSION BUILD_DIR USER_COMMAND1 USER_COMMAND2 USER_COMMAND3 REPO_CK_MIRROR REPO_CK_NAME USE_LOCAL_REPO LOCAL_REPO_FOLDER LOCAL_REPO_NAME USE_REPOCTL REPOCTL_FOLDER DBFILE localmodcfg clangbuild )

    mv "$CONFIG_DIR/$program_name.conf" "$CONFIG_DIR/$program_name.old"
    default_conf "$CONFIG_DIR/$program_name.conf"

    for item in ${!UPDATE[*]}; do
        sed -i '/^#/!s|^'"${UPDATE[$item]}"'=".*"|'"${UPDATE[$item]}"'="'"${!UPDATE[$item]}"'"|g' "$CONFIG_DIR/$program_name.conf"
    done

    sed -i '/^#/!s|subarch=(.*)|subarch=( '"${subarch[*]}"' )|g'    "$CONFIG_DIR/$program_name.conf"
    sed -i '/^#/!s|PROFILES=(.*)|PROFILES=( '"${PROFILES[*]}"' )|g' "$CONFIG_DIR/$program_name.conf"
    sed -i '/USER_COMMAND/s|\$|\\$|g;/USER_COMMAND/s|\\\\|\\|g'     "$CONFIG_DIR/$program_name.conf"
    echo "Config updated!"
}


function load_config {
    if [ -r "$CONFIG_DIR/$program_name.conf" ]; then
        # shellcheck source=/dev/null
        .   "$CONFIG_DIR/$program_name.conf"
        if [ "$CONFIG_VERSION" == "$VERSION" ]; then
            if [[ -z $EDITOR || -z $BUILD_DIR || -z $subarch ]]; then
                echo "ERROR: One or more settings are missing, please check your configuration."
                sleep 3
                edit_config
            fi
        else
            subarches "$CONFIG_DIR/subarches"
            update_config
        fi
    else
        mkdir -p     "$CONFIG_DIR"
        default_conf "$CONFIG_DIR/$program_name.conf"
        subarches    "$CONFIG_DIR/subarches"
        edit_config
    fi
}


function update_repo {
    if [ -n "$USE_REPOCTL" ]; then
        find "$BUILD_DIR/linux-ck" -maxdepth 1 -name '*.pkg.tar.zst' -exec repoctl add {} \;
        repoctl update
    fi
    if [ -n "$USE_LOCAL_REPO" ]; then
        mkdir -p "$LOCAL_REPO_FOLDER"
        mkdir -p "$LOCAL_REPO_FOLDER/archive"
        moved="n"
        if [ "$1" == "cleanup" ]; then
            mapfile -t obsolete < <(find "$LOCAL_REPO_FOLDER" -maxdepth 1 -name '*.pkg.tar.zst' | grep -v -f "$BUILD_DIR/.last_build")
            mv "${obsolete[@]}" -t "$LOCAL_REPO_FOLDER/archive" 2>/dev/null && rm -f "$LOCAL_REPO_FOLDER/$LOCAL_REPO_NAME".{db,files}* && moved="y"
            mapfile -t renew < <(find "$LOCAL_REPO_FOLDER/archive" -maxdepth 1 -name '*.pkg.tar.zst' | grep -o -f "$BUILD_DIR/.last_build"| sed 's|^.*$|'"$LOCAL_REPO_FOLDER"'/archive/&-x86_64.pkg.tar.zst|g')
            mv "${renew[@]}" -t "$LOCAL_REPO_FOLDER" 2>/dev/null && moved="y"
        else
            cp "$BUILD_DIR/linux-ck"/*.pkg.tar.zst -t "$LOCAL_REPO_FOLDER" 2>/dev/null && moved="y"
        fi
        if [ "$moved" == "y" ]; then
            last_versions=$(/usr/bin/ls -1 "$LOCAL_REPO_FOLDER"/*.pkg.tar.zst | sort -Vr | sort -ut. -k1,1)
            old_versions=$(/usr/bin/ls -1  "$LOCAL_REPO_FOLDER"/*.pkg.tar.zst | grep -v "$last_versions")
            # shellcheck disable=SC2046,SC2116
            repo-add -q -n --nocolor "$LOCAL_REPO_FOLDER/$LOCAL_REPO_NAME.db.tar.zst" $(echo "$last_versions") && mv "$old_versions" -t "$LOCAL_REPO_FOLDER/archive" 2>/dev/null
        fi
    fi
    if [ "$1" == "cleanup" ]; then
        cd "$BUILD_DIR/linux-ck" && git clean -dfx
    else
        find "$BUILD_DIR/linux-ck" -maxdepth 1 -name '*.pkg.tar.zst' -delete
    fi
}


function check_build_dir {
    if [ -r "$BUILD_DIR/linux-ck/PKGBUILD" ]; then
        git -C "$BUILD_DIR/linux-ck" reset --hard --quiet
        cd "$BUILD_DIR/linux-ck" || exit 1
        if [ -n "$NEEDED_VERSION" ]; then
            git -c advice.detachedHead=false checkout "${NEEDED_VERSION%:*}"
        else
            git checkout --quiet master
            git -C "$BUILD_DIR/linux-ck" pull --quiet
        fi
    else
        echo "PKGBUILD not found at configured location, seting up..."
        echo "Cloning AUR package"
        git -C "$BUILD_DIR" clone "https://aur.archlinux.org/linux-ck.git" --quiet
        echo "Adding pgp keys"
        sudo pacman-key -r 5EE46C4C --keyserver "keyserver.ubuntu.com" && sudo pacman-key --lsign-key 5EE46C4C # Graysky
        gpg --locate-keys torvalds@kernel.org gregkh@kernel.org # Linus Torvalds and Greg Kroah-Hartman
        if [ -n "$USE_DEVTOOLS" ]; then
            echo "Install nopass option for automatically pkgctl build"
            (curl -s "https://gitlab.archlinux.org/archlinux/infrastructure/-/raw/master/roles/archbuild/files/sudoers?inline=false"; echo "%wheel            ALL = NOPASSWD: ARCHBUILD") | sudo tee /etc/sudoers.d/pkgctl && sudo chmod 440 /etc/sudoers.d/pkgctl && sudo visudo -c
        else
            echo "Install all dependencies for automatically makepkg build"
            sudo pacman -Syu --needed base-devel bc cpio gettext libelf pahole python perl tar xz clang llvm lld
        fi
    fi
}


function check_repo_ck {
    package_kernel=linux-ck$subarch_name$([ -n "$localmodcfg" ] && echo "-modprobed")-$latest_version-x86_64.pkg.tar.zst
    package_headers=linux-ck$subarch_name$([ -n "$localmodcfg" ] && echo "-modprobed")-headers-$latest_version-x86_64.pkg.tar.zst
    if [ -r "$LOCAL_REPO_FOLDER/archive/$package_kernel" ]; then
       echo "found in archive local repo"
       return
    elif [ -r "$LOCAL_REPO_FOLDER/$package_kernel" ]; then
       echo "found in local repo"
       return
    elif [ -r "$REPOCTL_FOLDER/archive/$package_kernel" ]; then
       echo "found in archive repoctl folder"
       return
    elif [ -r "$REPOCTL_FOLDER/$package_kernel" ]; then
       echo "found in repoctl folder"
       return
    elif [ -r "$BUILD_DIR/linux-ck/$package_kernel" ]; then
       echo "found in build dir"
       return
    elif [ -z "$localmodcfg" ]; then
        curl_cmd="curl --head --fail --silent"
        kernel=$($curl_cmd  "$REPO_CK_MIRROR/$package_kernel"  | grep 'HTTP/2 200')
        headers=$($curl_cmd "$REPO_CK_MIRROR/$package_headers" | grep 'HTTP/2 200')

        if [[ -n "$kernel" && "$headers" ]]; then
            #Get sha256sums
            curl -sL "$REPO_CK_MIRROR/$REPO_CK_NAME.db.tar.gz" | tar xJ --one-top-level="/tmp/linux-ck-hashes"
            sha256sums=$(grep -REA1 "%(FILENAME|SHA256SUM)%" "/tmp/linux-ck-hashes" | sed 's/ --//g;s/%SHA256SUM%//g;s/%FILENAME%//g;s/\n//g')
            rm -fr "/tmp/linux-ck-hashes"

            echo "mirroring from $REPO_CK_MIRROR"
            cd "$BUILD_DIR/linux-ck" || exit 1
            for package in "$package_kernel" "$package_headers"; do
                curl -C - "$REPO_CK_MIRROR/$package" -o "$package.remote"
                sha256sum_check=$(echo "$sha256sums" | grep -Po '(?<='"$package"' -- )([^ ]*) \K(\S+)'| grep -Po '(?<=desc-)(\S+)')
                [ "$(echo "$sha256sum_check $package.remote" | sha256sum --check - --status)" ] || mv "$package.remote" "$package"
            done
        fi
    fi
}


function pp {
    [ -n "$1" ] && echo "$2" || echo "$3"
}


function main_program {
    check_build_dir
    # shellcheck source=/dev/null
    . "$CONFIG_DIR/subarches"

    if [ -n "$NEEDED_VERSION" ]; then
        latest_version=${NEEDED_VERSION#*:}
    else
        latest_version=$(curl -s "https://aur.archlinux.org/packages/linux-ck" | grep -Po '(?<=linux-ck ).*(?=</h2)')
    fi
    [ "$latest_version" == "" ] && { echo "Error: latest version not defined from AUR. Check settings or connection!"; exit 1; }

    for element in "${subarch[@]}"; do

        subarch_name="arch_$element"
        [ "${!subarch_name}" != "" ] && subarch_name="-"${!subarch_name} || subarch_name=${!subarch_name}

        kernel_version=linux-ck$subarch_name$([ -n "$localmodcfg" ] && echo "-modprobed")-$latest_version
        headers_version=linux-ck$subarch_name$([ -n "$localmodcfg" ] && echo "-modprobed")-headers-$latest_version
        pkgbuild="$BUILD_DIR/linux-ck/PKGBUILD"
        config="$BUILD_DIR/linux-ck/config"
        logfile="$BUILD_DIR/$kernel_version.log"

        found=$(check_repo_ck)
        if [ -z "$found" ]; then

            # PKGBUILD file
            if [ -z "$localmodcfg" ]; then
                sed -i '/pkgbase=/c\pkgbase=linux-ck'"$subarch_name"'' "$pkgbuild"
            else
                sed -i '/pkgbase=/c\pkgbase=linux-ck'"$subarch_name"'-modprobed' "$pkgbuild"
                sed -i '/_localmodcfg=/c\_localmodcfg='"$localmodcfg"'' "$pkgbuild"
                # shellcheck disable=SC2016
                sed -i '/        make LLVM=$_LLVM LLVM_IAS=$_LLVM LSMOD="$HOME\/.config\/modprobed.db" localmodconfig/c\        yes "N" | make LLVM=$_LLVM LLVM_IAS=$_LLVM LSMOD="$HOME\/.config\/modprobed.db" localmodconfig' "$pkgbuild"
                sed -i "s|\$HOME/.config/modprobed.db|../$DBFILE|g" "$pkgbuild"
                sed -i "s|  config |  $DBFILE config|" "$pkgbuild"
                sed -i "s|'SKIP'|'SKIP' 'SKIP'|" "$pkgbuild"
                cp "$CONFIG_DIR/$DBFILE" "$BUILD_DIR/linux-ck/$DBFILE"
            fi
            sed -i '/_subarch=/c\_subarch='"$element"'' "$pkgbuild"
            if [ -n "$clangbuild" ]; then
                sed -i '/_clangbuild=/c\_clangbuild='"$clangbuild"'' "$pkgbuild"
            fi
            for patch in $( find "$BUILD_DIR" -maxdepth 1 -name '*.patch' 2>/dev/null | sort -r ) ; do
                sed -i '/  diff -u ..\/config .config || :/c\  diff -u ..\/config .config || :\n\n  patch -Np1 < "..\/..\/..\/'"$(basename "$patch")"'"' "$pkgbuild"
            done

            # config file
            if [ -n "$NOMODULES" ]; then
                for module in $NOMODULES ; do
                    sed -i 's/'"$module"'=m/#'"$module"' is not set/' "$config"
                done
                editconfig="y"
            fi
            if [ -n "$editconfig" ]; then
                oldsha256sum=$(grep -A2 'sha256sums' "$pkgbuild" | tail -1 | cut -d"'" -f2)
                newsha256sum=$(sha256sum "$config" | cut -d" " -f1)
                sed -i 's/'"$oldsha256sum"'/'"$newsha256sum"'/' "$pkgbuild"
            fi

            # Compile kernel
            echo "$(date +"%Y-%m-%d_%H:%M") Starting kernel build $kernel_version"
            echo "Compile parameters are:"
echo "  Modprobed-db file$(pp "$localmodcfg" ": $DBFILE" ": No")"
echo "  Using Clang$(pp "$clangbuild" ": Yes" ": No")"
echo "  Modules that are not compiled$(pp "$NOMODULES" ": $NOMODULES" ": None")"
echo
            if [ -n "$USE_DEVTOOLS" ]; then
                echo -e "\nCompile kernel with pkgctl build in clean chroot...\n"
                echo "$(date) Making package: $kernel_version" > "$logfile"
                if [ "$1" == "nobuild" ]; then
                    _buildstatus="Skipping kernel build..."
                    echo "$_buildstatus"
                else
                    ( cd "$BUILD_DIR/linux-ck" && pkgctl build ) >> "$logfile"
                    status=$?
                     echo "$(date) Finished making: $kernel_version" >> "$logfile"
                fi
            else
                if [ "$1" == "nobuild" ]; then
                    _buildstatus="Skipping kernel build..."
                    echo "$_buildstatus"
                else
                    ( cd "$BUILD_DIR/linux-ck" && makepkg -mC ) > "$logfile"
                    status=$?
                    _buildstatus=$(echo -n "$status: "; head -1 "$logfile"; tail -1 "$logfile" | sed 's/==>//g')
                fi
            fi
            echo "$(date +"%Y-%m-%d_%H:%M") End kernel build $kernel_version"
            eval "$USER_COMMAND1"
            echo
        else
            echo "$(date +"%Y-%m-%d_%H:%M") Kernel $kernel_version $found" > "$logfile"
        fi
        update_repo
        echo "$kernel_version" >> "$BUILD_DIR/.last_build"
        echo "$headers_version" >> "$BUILD_DIR/.last_build"
    done
}

load_config

getopts ":hcln:a" option

case "$option" in
    h ) print_help;;
    c ) edit_config "$2";;
    l ) find "$HOME/.config/$program_name" -maxdepth 1 ! -name "$program_name.conf" -name "*.conf" ||  echo "No additional profiles found. Use -c option instead for edit" ;;
    n ) new_profile "$OPTARG";;
    a ) set_subarches;;
    : ) echo "Option requres an secord argument -- $OPTARG" && exit 1;;
    ? ) [ -n "$OPTARG" ] && { echo "Option not found, try -h or --help" && exit 1; }
        mkdir -p "$BUILD_DIR"
        : > "$BUILD_DIR"/.last_build
        for profile in "${PROFILES[@]}"; do
            load_config
            if [ -r "$CONFIG_DIR/$profile.conf" ]; then
                #shellcheck source=/dev/null
                . "$CONFIG_DIR/$profile.conf"
            else
                echo "Profile $profile not found. Skipping"
                profile="linux-ck-autobuild"
            fi
            echo -e "\n\nProfile loaded: $profile.conf"
            main_program "$([ "$1" == "nobuild" ] && echo "nobuild")"
            eval "$USER_COMMAND2"
        done
        update_repo "cleanup"
        eval "$USER_COMMAND3"
        ;;
esac
