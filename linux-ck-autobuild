#!/bin/bash
# Author: Jochum D, jooch (at) gmx (dot) com
# Maintainer: Nebulosa
# License: GPL3
# About: This script will automatically build specified ck kernels on a headless machines.
# Usage: Run 'linux-ck-autobuild' or 'linux-ck-autobuild -h' for more details.
VERSION=0.6.4

program_name="linux-ck-autobuild"


function subarches {
    cat << EOF > $1
arch_1="k8"              #  1. AMD Opteron/Athlon64/Hammer/K8 (MK8)
arch_2="k8sse3"          #  2. AMD Opteron/Athlon64/Hammer/K8 with SSE3 (MK8SSE3) (NEW)
arch_3="k10"             #  3. AMD 61xx/7x50/PhenomX3/X4/II/K10 (MK10) (NEW)
arch_4="barcelona"       #  4. AMD Barcelona (MBARCELONA) (NEW)
arch_5="bobcat"          #  5. AMD Bobcat (MBOBCAT) (NEW)
arch_6="jaguar"          #  6. AMD Jaguar (MJAGUAR) (NEW)
arch_7="bulldozer"       #  7. AMD Bulldozer (MBULLDOZER) (NEW)
arch_8="piledriver"      #  8. AMD Piledriver (MPILEDRIVER) (NEW)
arch_9="steamroller"     #  9. AMD Steamroller (MSTEAMROLLER) (NEW)
arch_10="excavator"      #  10. AMD Excavator (MEXCAVATOR) (NEW)
arch_11="zen"            #  11. AMD Zen (MZEN) (NEW)
arch_12="zen2"           #  12. AMD Zen 2 (MZEN2) (NEW)
arch_13="zen3"           #  13. AMD Zen 3 (MZEN3) (NEW)
arch_14="zen4"           #  14. AMD Zen 4 (MZEN4) (NEW)
arch_15="psc"            #  15. Intel P4 / older Netburst based Xeon (MPSC)
arch_16="core2"          #  16. Intel Core 2 (MCORE2)
arch_17="atom"           #  17. Intel Atom (MATOM)
arch_18="nehalem"        #  18. Intel Nehalem (MNEHALEM) (NEW)
arch_19="westmere"       #  19. Intel Westmere (MWESTMERE) (NEW)
arch_20="silvermont"     #  20. Intel Silvermont (MSILVERMONT) (NEW)
arch_21="goldmont"       #  21. Intel Goldmont (MGOLDMONT) (NEW)
arch_22="goldmontplus"   #  22. Intel Goldmont Plus (MGOLDMONTPLUS) (NEW)
arch_23="sandybridge"    #  23. Intel Sandy Bridge (MSANDYBRIDGE) (NEW)
arch_24="ivybridge"      #  24. Intel Ivy Bridge (MIVYBRIDGE) (NEW)
arch_25="haswell"        #  25. Intel Haswell (MHASWELL) (NEW)
arch_26="broadwell"      #  26. Intel Broadwell (MBROADWELL) (NEW)
arch_27="skylake"        #  27. Intel Skylake (MSKYLAKE) (NEW)
arch_28="skylakex"       #  28. Intel Skylake X (MSKYLAKEX) (NEW)
arch_29="cannonlake"     #  29. Intel Cannon Lake (MCANNONLAKE) (NEW)
arch_30="icelake"        #  30. Intel Ice Lake (MICELAKE) (NEW)
arch_31="cascadelake"    #  31. Intel Cascade Lake (MCASCADELAKE) (NEW)
arch_32="cooperlake"     #  32. Intel Cooper Lake (MCOOPERLAKE) (NEW)
arch_33="tigerlake"      #  33. Intel Tiger Lake (MTIGERLAKE) (NEW)
arch_34="sapphirerapids" #  34. Intel Sapphire Rapids (MSAPPHIRERAPIDS) (NEW)
arch_35="rocketlake"     #  35. Intel Rocket Lake (MROCKETLAKE) (NEW)
arch_36="alderlake"      #  36. Intel Alder Lake (MALDERLAKE) (NEW)
arch_37="raptorlake"     #  37. Intel Raptor Lake (MRAPTORLAKE) (NEW)
arch_38="meteorlake"     #  38. Intel Meteor Lake (MMETEORLAKE) (NEW)
arch_39=""               #  39. Generic-x86-64 (GENERIC_CPU) (DEFAULT)
arch_40="generic-v2"     #  40. Generic-x86-64-v2 (GENERIC_CPU2) (NEW)
arch_41="generic-v3"     #  41. Generic-x86-64-v3 (GENERIC_CPU3) (NEW)
arch_42="generic-v4"     #  42. Generic-x86-64-v4 (GENERIC_CPU4) (NEW)
arch_43="native_intel"   #  43. Intel-Native optimizations autodetected by the compiler (MNATIVE_INTEL) (NEW)
arch_44="native_amd"     #  44. AMD-Native optimizations autodetected by the compiler (MNATIVE_AMD) (NEW)
EOF
}


function default_conf {
    cat << EOF > $1
CONFIG_VERSION=0.6.4
# Preferred editor for editing settings.
EDITOR="need_config"

# The base directory on this system where the directories to sync are located. Don't add a slash at the end!
BUILD_DIR="/home/$USER/.local/share/linux-ck-autobuild"

# If you have a local repository and wish to automatically add completed builds to it you can enable it by
# setting USE_LOCAL_REPO to "y", leave empty to disable.
USE_LOCAL_REPO=""
# Location of your local repository and database. Don't add a slash at the end!
# Hint: to add repo in pacman.conf:
# [<LOCAL_REPO_NAME>]
# SigLevel = Optional TrustAll
# Server = file:///<LOCAL_REPO>
LOCAL_REPO="/home/$USER/.local/share/linux-ck-autobuild/local_repo"
LOCAL_REPO_NAME="linux-ck"

# List the sub architecture you want to build : ( 39 )
# In case of multiple architectures separate them with a space like so: ( 39 43 44 )
# Or use option -a for select from subarches list, see --help.
SUBARCH=( 39 )

# If you have the modprobe-db package installed and wish to use it, change to 'y' otherwise leave empty.
# With the modprobe-db package only the modules that were listed by modprobe-db get build, significantly
# reducing build times.
# See: https://wiki.archlinux.org/title/Modprobed-db
USE_MODPROBE_DB=""

# Compile using clang rather than gcc, change to 'y' otherwise leave empty.
USE_CLANG=""

# Automatic answer to (NEW) kernel modules. Can be 'Y' 'M' 'N', depends witch new module you need to compile.
AUTONO="N N N N N"

# List of modules does not need to be compiled, space separated.
NOMODULES=""

# Select a repo-ck mirror to use when seeking for prebuilt packages (only one can be enabled).
REPO_CK_MIRROR="https://mirror.lesviallon.fr/repo-ck/os/x86_64"
REPO_CK_NAME="repo-ck"
#REPO_CK_MIRROR="http://repo-ck.com/x86_64"
#REPO_CK_NAME="repo-ck"

# Sets the interval with which the watchdog monitors for a new kernel
WATCHDOG_INTERVAL="6h"

# User commands to run after compiling kernels, example: 'echo "Autobuild done" | mail -s "Autobuild done" mail@domain.tld'
USER_COMMAND1=""
USER_COMMAND2=""
USER_COMMAND3=""

# LOW RAM SPECIFIC SETTINGS ONLY
# When compile kernel on a machine with low RAM, like VPS, default compressor ZSTD doesn't compress kernel
# with RAM less than 1Gb, you should choose another compressor - GZIP, BZIP2, LZMA, XZ (recommended), LZO, LZ4
USE_KERNEL_COMPRESS_METHOD=""
EOF
}


function print_help {
    echo "
$program_name, version $VERSION for headless machines.

A tool to automatically build -ck kernels.

Options:
-h,    --help    Display this help
-c,              Create and/or set options
-a,              Choose desired subarches
"
    exit 1
}


function edit_config {
    if [ -f /usr/bin/$EDITOR ]; then
        $EDITOR /home/$USER/.config/$program_name/$program_name.conf
        .       /home/$USER/.config/$program_name/$program_name.conf
    else
        echo -e "No editor found, please set your editor in:\n/home/$USER/.config/$program_name/$program_name.conf"
    fi
    exit 1
}


function set_subarches {
    message="Default is Generic-x86-64 - number 39. See: https://wiki.archlinux.org/index.php/Repo-ck for more info"
    if [ -x "$(command -v fzf)" ]; then
        archs=$(cat /home/$USER/.config/$program_name/subarches | cut -d "#" -f2 | fzf --sync --bind 'start:pos(39)+select+pos(1)' -m --reverse --preview "echo 'Use Tab to select desired archs'; echo $message" --preview-window=wrap | cut -d'.' -f1 | tr -d '\n')
    else
        cat /home/$USER/.config/$program_name/subarches | cut -d "#" -f2
        echo -e "\n$message\n"
        archs=" 39 "
        read -rp "Write numbers of desired arches above, space separated:" -e -i "${archs}" archs
    fi
    if [ -n "$archs" ]; then
        sed -i '/^#/!s/SUBARCH=(.*)/SUBARCH=('"${archs[*]}"')/g' /home/$USER/.config/$program_name/$program_name.conf
        echo "Config updated!"
    fi
    exit 1
}


function update_config {
    UPDATE=( EDITOR BUILD_DIR USE_LOCAL_REPO LOCAL_REPO LOCAL_REPO_NAME USE_MODPROBE_DB USE_CLANG AUTONO NOMODULES REPO_CK_MIRROR REPO_CK_NAME WATCHDOG_INTERVAL USER_COMMAND1 USER_COMMAND2 USER_COMMAND3 USE_KERNEL_COMPRESS_METHOD )

    mv /home/$USER/.config/$program_name/$program_name.conf /home/$USER/.config/$program_name/$program_name.old
    default_conf /home/$USER/.config/$program_name/$program_name.conf

    for element in "${UPDATE[@]}"; do
        sed -i '/^#/!s|'$element'=".*"|'$element'="'${!element}'"|g' /home/$USER/.config/$program_name/$program_name.conf
    done

    sed -i '/^#/!s/SUBARCH=(.*)/SUBARCH=( '"${SUBARCH[*]}"' )/g' /home/$USER/.config/$program_name/$program_name.conf
    echo "Config updated!"
}


function load_config {
    if [ -r /home/$USER/.config/$program_name/$program_name.conf ]; then
        .   /home/$USER/.config/$program_name/$program_name.conf
        if [ "$CONFIG_VERSION" == "$VERSION" ]; then
            if [[ -z $EDITOR || -z $BUILD_DIR || -z $SUBARCH ]]; then
                echo "ERROR: One or more settings are missing, please check your configuration." && exit 1
            fi
        else
            subarches /home/$USER/.config/$program_name/subarches
            update_config
        fi
    else
        mkdir -p     /home/$USER/.config/$program_name/
        default_conf /home/$USER/.config/$program_name/$program_name.conf
        subarches    /home/$USER/.config/$program_name/subarches
        edit_config
    fi
}


function update_repo {
    if [ -n "$USE_LOCAL_REPO" ]; then
        mkdir -p $LOCAL_REPO
        mv $BUILD_DIR/linux-ck/*$latest_version-x86_64.pkg.tar.zst $LOCAL_REPO 2> /dev/null
        repo-add -q -n --nocolor $LOCAL_REPO/$LOCAL_REPO_NAME.db.tar.xz $LOCAL_REPO/*$latest_version-x86_64.pkg.tar.zst
    fi
}


function check_build_dir {
    if [ -r $BUILD_DIR/linux-ck/PKGBUILD ]; then
        git -C $BUILD_DIR/linux-ck reset --hard --quiet
        git -C $BUILD_DIR/linux-ck pull --quiet
    else
        echo "PKGBUILD not found at configured location, seting up..."
        mkdir -p $BUILD_DIR
        echo "Cloning AUR package"
        git -C $BUILD_DIR clone https://aur.archlinux.org/linux-ck.git --quiet
        echo "Adding pgp keys"
        sudo pacman-key -r 5EE46C4C --keyserver keyserver.ubuntu.com && sudo pacman-key --lsign-key 5EE46C4C # Graysky
        gpg --recv-keys 79BE3E4300411886 # Linus Torvalds
        gpg --recv-keys 38DBBDC86092693E # Greg Kroah-Hartman
        echo "Install dependencies"
        sudo pacman -Syu --needed bc cpio gettext libelf pahole python perl tar xz $([ -n "$USE_CLANG" ] && echo "clang llvm lld")
    fi
}


function check_repo_ck {
    package_kernel="linux-ck$subarch_name-$latest_version-x86_64.pkg.tar.zst"
    package_header="linux-ck$subarch_name-headers-$latest_version-x86_64.pkg.tar.zst"
    if [ -n "USE_LOCAL_REPO" ] && [ -r $LOCAL_REPO/$package_kernel ]; then
       echo "found in local repo"
       return
    fi
    if [ -r $BUILD_DIR/$package_kernel ]; then
       echo "found in build dir"
       return
    fi
    curl_cmd="curl --head --fail --silent"
    kernel=$($curl_cmd  $REPO_CK_MIRROR/$package_kernel | grep 'HTTP/2 200')
    headers=$($curl_cmd $REPO_CK_MIRROR/$package_header | grep 'HTTP/2 200')

    if [[ -n $kernel && $headers ]]; then
        #Get sha256sums
        curl -sL $REPO_CK_MIRROR/$REPO_CK_NAME.db.tar.gz | tar xJ --one-top-level=/tmp/linux-ck-hashes
        sha256sums=$(grep -REA1 "%(FILENAME|SHA256SUM)%" /tmp/linux-ck-hashes | sed 's/ --//g;s/%SHA256SUM%//g;s/%FILENAME%//g;s/\n//g')
        rm -fr /tmp/linux-ck-hashes

        echo "mirroring from $REPO_CK_MIRROR"
        cd $BUILD_DIR/linux-ck
        for package in $package_kernel $package_header; do
            curl -C - $REPO_CK_MIRROR/$package -o $package.remote
            sha256sum_check=$(echo $sha256sums | grep -Po '(?<='$package' -- )([^ ]*) \K(\S+)'| grep -Po '(?<=desc-)(\S+)')
            [ `echo "$sha256sum_check $package.remote" | sha256sum --check - --status` ] || mv $package{.remote,}
        done
    fi
}


function main_program {
    check_build_dir
    . /home/$USER/.config/$program_name/subarches

    latest_version=$(curl -s https://aur.archlinux.org/packages/linux-ck | grep -Po '(?<=linux-ck ).*(?=</h2)')
    [ "$latest_version" == "" ] && { echo "Error: latest version not defined from AUR. Check settings or connection!"; exit 1; }

    for element in "${SUBARCH[@]}"; do

        subarch_name="arch_$element"
        [ "${!subarch_name}" != "" ] && subarch_name="-"${!subarch_name} || subarch_name=${!subarch_name}

        logfile=$BUILD_DIR/linux-ck$subarch_name-$latest_version.log

        found=$(check_repo_ck)
        if [ -z "$found" ]; then

            # PKGBUILD file
            if [ -z "$USE_MODPROBE_DB" ]; then
                sed -i '/pkgbase=/c\pkgbase=linux-ck'$subarch_name'' $BUILD_DIR/linux-ck/PKGBUILD
            else
                sed -i '/pkgbase=/c\pkgbase=linux-ck'$subarch_name'-modprobed' $BUILD_DIR/linux-ck/PKGBUILD
                sed -i '/_localmodcfg=/c\_localmodcfg='$USE_MODPROBE_DB'' $BUILD_DIR/linux-ck/PKGBUILD
            fi
            sed -i '/_subarch=/c\_subarch='$element'' $BUILD_DIR/linux-ck/PKGBUILD
            if [ -n "$USE_CLANG" ]; then
                sed -i '/_clangbuild=/c\_clangbuild='$USE_CLANG'' $BUILD_DIR/linux-ck/PKGBUILD
            fi
            for patch in $( ls -1 $BUILD_DIR/*.patch 2>/dev/null | sort -r ) ; do
                sed -i '/  diff -u ..\/config .config || :/c\  diff -u ..\/config .config || :\n\n  patch -Np1 < "..\/..\/..\/'$(basename $patch)'"' $BUILD_DIR/linux-ck/PKGBUILD
            done

            # config file
            if [ -n "$USE_KERNEL_COMPRESS_METHOD" ]; then
                sed -i 's/# CONFIG_KERNEL_'$USE_KERNEL_COMPRESS_METHOD' is not set/CONFIG_KERNEL_'$USE_KERNEL_COMPRESS_METHOD'=y/' $BUILD_DIR/linux-ck/config
                sed -i 's/CONFIG_KERNEL_ZSTD=y/# CONFIG_KERNEL_ZSTD is not set/' $BUILD_DIR/linux-ck/config
                editconfig="y"
            fi
            if [ -n "$NOMODULES" ]; then
                for module in $NOMODULES ; do
                    sed -i 's/'$module'=m/#'$module' is not set/' $BUILD_DIR/linux-ck/config
                done
                editconfig="y"
            fi
            if [ -n "editconfig" ]; then
                oldsha256sum=$(grep -A2 'sha256sums' $BUILD_DIR/linux-ck/PKGBUILD | tail -1 | cut -d"'" -f2)
                newsha256sum=$(sha256sum $BUILD_DIR/linux-ck/config | cut -d" " -f1)
                sed -i 's/'$oldsha256sum'/'$newsha256sum'/' $BUILD_DIR/linux-ck/PKGBUILD
            fi

            # Compile kernel
            echo "$(date +"%Y-%m-%d_%H:%M") Starting kernel build linux-ck$subarch_name-$latest_version"
            echo -e "Settings are:\nModprobe: $USE_MODPROBE_DB\nCLANG: $USE_CLANG\nCompress method:$USE_KERNEL_COMPRESS_METHOD\nModules to not compile:$NOMODULES\n"
            ( cd $BUILD_DIR/linux-ck && ( echo $AUTONO | tr ' ' '\n' | makepkg -C )) > $logfile
            echo "$(date +"%Y-%m-%d_%H:%M") End kernel build linux-ck$subarch_name-$latest_version"
            else
                echo "$(date +"%Y-%m-%d_%H:%M") Kernel linux-ck$subarch_name-$latest_version $found" > $logfile
        fi
    done
    echo "$latest_version" > $BUILD_DIR/.last_build
    update_repo
}


load_config


if [ -n "$1" ]; then
    case "$1" in
    -h | --help ) print_help ;;
    -c          ) edit_config ;;
    -a          ) set_subarches;;
     *          ) echo "Option not found, try -h or --help" && exit 1 ;;
    esac
fi


main_program
$USER_COMMAND1
$USER_COMMAND2
$USER_COMMAND3
